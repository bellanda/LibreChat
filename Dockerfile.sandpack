# Dockerfile Multistage para Sandpack Bundler
# Faz build completo e serve automaticamente - Sem necessidade de build local

# ============================================
# Stage 1: Build do Sandpack
# ============================================
FROM node:16-bullseye as builder

WORKDIR /build

# Install system dependencies needed for build
RUN apt-get update && apt-get install -y \
    zstd \
    && rm -rf /var/lib/apt/lists/*

# Copy all files needed for build
COPY package.json yarn.lock lerna.json ./
COPY packages ./packages
COPY standalone-packages ./standalone-packages

# Enable Corepack (for modern yarn)
RUN corepack enable

# Install dependencies (without frozen-lockfile to avoid conflicts)
RUN yarn install

# Build internal dependencies (lerna packages)
RUN yarn build:deps

# Create empty files needed for build
RUN touch .env && touch env.sh

# Build Sandpack bundler (generates www/ folder)
RUN yarn build:sandpack

# Verify if www folder was generated
RUN ls -la www/ && echo "Sandpack bundler built successfully!"

# ============================================
# Stage 2: Nginx Server
# ============================================
FROM nginx:1.25.3-alpine

# Copy built files from previous stage
COPY --from=builder /build/www /var/www/codesandbox

# Nginx configuration
RUN cat > /etc/nginx/conf.d/default.conf <<'EOF'
server {
    listen 80;
    server_name localhost;

    root /var/www/codesandbox;
    index index.html;

    # CORS - Permitir acesso do domínio principal LibreChat
    # Nota: Em produção, o nginx externo controlará CORS com mais precisão
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, Range" always;

    # Cache para assets estáticos (Web Workers, Transpilers)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*" always;
    }

    # Service Worker (desabilitado em builds SANDPACK=true)
    location /service-worker.js {
        add_header Cache-Control "no-cache";
        add_header Access-Control-Allow-Origin "*" always;
    }

    # Web Workers - Importante para transpiladores
    location ~* \.worker\.js$ {
        add_header Cache-Control "no-cache";
        add_header Access-Control-Allow-Origin "*" always;
    }

    # Fallback para SPA
    location / {
        try_files $uri $uri/ /index.html;
        add_header Access-Control-Allow-Origin "*" always;
    }

    # Health check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    access_log off;
    error_log /var/log/nginx/error.log error;
}
EOF

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s \
  CMD wget --quiet --tries=1 --spider http://127.0.0.1/health || exit 1

CMD ["nginx", "-g", "daemon off;"]
